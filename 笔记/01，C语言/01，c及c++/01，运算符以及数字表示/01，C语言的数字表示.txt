1，对于1,123等数，系统默认其为int类型的常量，它占用4个字节，管理4个字节

2，计算机内部用补码表示
	1，补码消除了+-0的二义性，只有补码能表示数值。在计算机内部看到的数都是补码。
		内部的运算也都是补码。
	2，对于正数如123
	原码为0000 0000 0000 0000 0000 0000 0111 1011
	反码为0000 0000 0000 0000 0000 0000 0111 1011  
	补码为0000 0000 0000 0000 0000 0000 0111 1011  
	对于正数，3码合一

	3，对于负数，-123
	原码是将正数对应的符号位最高位变为1，最高位表示符号的数为有符号数
	C语言还有无符号数，无符号数都是正数，没有符号位，所以无符号数的最大值更大。
	
	原码1000 0000 0000 0000 0000 0000 0111 1011
	反码1111 1111 1111 1111 1111 1111 1000 0100	符号不变，其余取反
	补码1111 1111 1111 1111 1111 1111 1000 0101	反码加1

	4，若将该值赋给char,那么char只管一个字节，会截断1000 0101来作为它的值。其他类似。但java没有类似的截断原则
	，他会有类型装换异常

	5，内部看到的是补码，要求值必须要转化为原码。最高位为0,为正数，3码合一，
		最高位为1为负数，减1取反。得到原码再求值。
	
3，对于浮点数，内部采用的是IEEE标准。

4，对一个数，取反加一，得负数。

5，无符号数
	unsigned char c1 = 0xff;//对于无符号char，11111111值为255。所有位都来计数，表示的数的范围更大
	printf("%d\n",c1);



