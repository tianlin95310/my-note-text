1
数组：注意越界
char a[] = {11,22,33,44};普通的字符数。
	
2，c风格字符串

char a[] = {65,66,67,0};
char a[] = {'A','B','C','\0'};以上两种等价

sizeof(a) == 4;求变量字节数
strlen(a) == 3;截取内容遇到0停止（从内存观察）,printf等也是这种原理

3，用字符串常量赋值

  1，char a[] = "ABC";
		因为以上的赋值太过麻烦，于是出现了这种简写，定义立即初始化，末尾有\0这种形式在
		内存中有两份"ABC"，一份在栈区，一份在常量区，栈区目前的内容是"ABC",其上的值可修
		改，a[i]可赋值，a本身不能改，否则内存泄露。如果定义时没有初始化，在想初始化只能
		一个一个字节的赋值。因为数组不能整体赋值。
		用数组的好处是长度有限定。用于保存文件等数据结构。

  2，char *b = "ABC";此种用法与以上有别，以上的a是数组，全部位于栈区，a是常量。而
		b是指针变量，它存的是字符串常量在内存中的地址	，b[i]是不能修改的，而b本身是可以修改的，
		他可以不指向这个常量字符串。c++的string类的核心成员就是char* str;它的长度是不定的，用对象来
		指定。

4,字符串与scanf
char a[5];
scanf("%s",&a);输入时不要超过长度，否则用到了别人的内存，可能导致错误
		输入时，碰到空格时，就完成输入。用到gets可避免

5
c风格字符串的比较与赋值比较麻烦，不过有相应的库函数
	strcmp比较函数
	strcpy赋值函数
	实现原理是一个一个字节的处理

void main()
{
	char str[20];
	char* s = "tianlin";
	for(int  i =0 ;i < sizeof(str) ;i++)
	{
		str[i] = s[i];
		if(s[i] == 0)
		{
			str[i] = s[i];
			break;
		}
	
	}
	printf("%s\n",str);
}
