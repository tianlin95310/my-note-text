#include <stdio.h>

#define dim(x) sizeof(x) / sizeof(x[0])
#define swap(x, y) {(x) = (x) + (y); (y) = (x) - (y); (x) = (x) - (y);}

//直接插入排序
//1.定义
//    直接插入排序(straight insertion sort)是一种最简单的排序方法。
//它的基本操作是将一个记录插入到一个长度为 m (假设)的有序表中，
//使之仍保持有序，从而得到一个新的长度为 m + 1 的有序表。
//2.算法思路
//　　设有一组关键字｛ K1 ， K2 ，…， Kn ｝；排序开始就认为
//K1 是一个有序序列；让 K2 插入上述表长为 1 的有序序列，使之
//成为一个表长为 2 的有序序列；然后让 K3 插入上述表长为 2 的有
//序序列，使之成为一个表长为 3 的有序序列；依次类推，最后让 Kn 
//插入上述表长为 n-1 的有序序列，得一个表长为 n 的有序序列。

//49, 38, 65, 97, 76, 13, 27

//38, 49, 65, 97, 76, 13, 27
//38, 49, 65, 97, 76, 13, 27
//38, 49, 65, 76, 97, 13, 27
//13, 38, 49, 65, 76, 97, 27
//13, 27, 38, 49, 65, 76, 97

void StraightInsertSort (int a[], int n)
{
	int i, m;
	for (i = 1; i < n; i++) //共进行n-1趟插入
	{
		m = i;
		while (m >= 1 && a[m] < a[m-1])	//短路表达式
		{
			swap(a[m], a[m-1]);	//比前一个小, 则与之交换
			m--;
		}
	}
}

void main()
{
	int a[] = {49, 38, 65, 97, 76, 13, 27};
	StraightInsertSort(a, dim(a));
	for (int i = 0; i < dim(a); i++)
	{
		printf("%d ", a[i]);
	}
	printf("\r\n");
}
