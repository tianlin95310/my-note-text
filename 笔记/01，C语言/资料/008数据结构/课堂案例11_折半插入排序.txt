#include <stdio.h>
#define DIM(x) sizeof(x) / sizeof(x[0])
#define SWAP(x, y) x = (y + x) - (y = x)
#define MID(x, y, z) (y < x && x < z) ? x : (x < y && y < z ? y : z)

//折半插入排序 (Binary insertion sort)
//1.定义
//    当直接插入排序进行到某一趟时，对于 a[i] 来讲，前边 i-1 个
//记录已经按有序。此时不用直接插入排序的方法，而改为先用 折半查找法
//找出 r[i] 应插的位置，然后再插入。这种方法就是折半插入排序.
//
//2. 算法思想
//a、初始化：设定有序区为第一个元素，设定无序区为后面所有元素
//b、依次取无序区的每个元素
//c、通过二分法查找有序区,返回比这个数小的最大数
//d、保留此位置数据
//e、从此位置的元素到有序区的最后一个元素，依次后移
//f、用保留的数据填充此位置

//49, 38, 65, 97, 76, 13, 27
//38, 49, 65, 97, 76, 13, 27
//38, 49, 65, 76, 97, 13, 27
//13, 38, 49, 65, 76, 97, 27

//在有序数组pSource中找到比iTarget小的元素.
//返回其下标.表示iTarget应该插入在该位置.
int BiLessSearch(int pSource[], int iTarget, int iLeft, int iRight)
{
	if (iTarget < pSource[iLeft])
	{
		return iLeft;	//超出范围,直接返回
	}
	if (iTarget > pSource[iRight])
	{
		return iRight + 1;	//超出范围,直接返回
	}

	int m = (iLeft + iRight) / 2;	//选取中值,准备二分
	if (pSource[m] >= iTarget)	//继续二分: 递归
	{
		return BiLessSearch(pSource, iTarget, iLeft, m - 1); //目标在左边,递归左边(p[m]已经比较过,排出查找范围)
	}
	else //if (pSource[m] < iTarget)
	{
		return BiLessSearch(pSource, iTarget, m + 1, iRight); //目标在右边,递归右边(p[m]已经比较过,排出查找范围)
	}
}

//13, 38, 49, 65, 76, 97, 27
void BinaryInsertSort (int a[], int n)
{
	for (int i = 1; i < n; i++) //共进行n-1趟插入
	{
		int iTmp = a[i];	//将待插入数据临时保存到iTmp中去.
		int m = BiLessSearch(a, a[i], 0, i - 1); //m是a[i]应该呆的位置
		for (int j = i; j > m; j--)
		{
			a[j] = a[j-1];	//整体向后移动一个位置
		}
		a[m] = iTmp;		//m是a[i]应该呆的位置
	}
}

void main()
{
	int a[] = {49, 38, 65, 97, 76, 13, 27};

	BinaryInsertSort(a, DIM(a));

	for (int i = 0; i < DIM(a); i++)
	{
		printf("%d ", a[i]);
	}
	printf("\r\n");
}
