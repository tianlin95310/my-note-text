#include <stdio.h>

#define dim(x) sizeof(x) / sizeof(x[0])

struct NODE
{
	char iData;
	NODE *pChild[5];
};

//前序遍历: 根左右(先访问根, 然后从左至右访问所有子树)
void PreOrder(NODE *node)
{
	if (node == NULL) return;
	printf("%c ", node->iData);
	for (int i = 0; i < 5; i++)
	{
		PreOrder(node->pChild[i]);
	}
}

//中序遍历: 左根右(先左边第一个子树, 然后访问根, 再从左至右访问剩下的其他子树)
void InOrder(NODE *node)
{
	if (node == NULL) return;

	InOrder(node->pChild[0]);

	printf("%c ", node->iData);

	for (int i = 1; i < 5; i++)
	{
		InOrder(node->pChild[i]);
	}
}

//后序遍历: 左右根(先从左至右访问所有子树, 然后访问根)
void LastOrder(NODE *node)
{
	if (node == NULL) return;

	for (int i = 0; i < 5; i++)
	{
		LastOrder(node->pChild[i]);
	}

	printf("%c ", node->iData);
}

//求树的节点数量
int GetNodeNum(NODE *node)
{
	int nCount = 0;
	if (node != NULL)
	{
		nCount++;
		for (int i = 0; i < 5; i++)
		{
			nCount += GetNodeNum(node->pChild[i]);
		}
	}
	return nCount;
}

//求树的深度(高度)
//1. 若树为空, 则高度为0
//2. 若树不为空, 则高度应为其所有子树高度的最大值加1
int GetNodeDepth(NODE *node)
{
	if (node == NULL) return 0;

	//计算5颗子树的高度，存入nDepth[5]
	int nDepth[5] = {0};
	for (int i = 0; i < 5; i++)
	{
		nDepth[i] = GetNodeDepth(node->pChild[i]);
	}

	//计算nDepth[5]中的最大值nMaxDepth
	int nMaxDepth = nDepth[0];
	for (i = 1; i < 5; i++)
	{
		if (nDepth[i] > nMaxDepth) nMaxDepth = nDepth[i];
	}

	//则整个树的高度为nMaxDepth+1
	return nMaxDepth + 1;
}

/******************************************************************
                A
              *   *
            B       C
          *  *    *  *
        D      E F	   G
     *  *  *
   H    I   J

设树T的根为n, 其子树从左到右依次为T1,T2,..,Tk, 那么有:
前序遍历: 先访问树根n,然后依次前序遍历T1, T2, .., Tk
中序遍历: 先中序遍历T1, 然后访问树根n，接着依次对T2, T3, .., Tk进行中序遍历
后序遍历: 先依次对T1, T2, .., Tk进行后序遍历, 最后访问树根n
******************************************************************/

void main()
{
	//1. 产生树tree, 其根为root
	char data[] = {'A',  'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
	char pid[]  = {NULL, 'A', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'D'};
	NODE *root = NULL;
	NODE *tree[10];

	//1.1 先根据data[]产生10个节点本身, 其子节点初始化为NULL, 存入tree[0]至tree[9]
	int i, j, k;
	for (i = 0; i < dim(data); i++)
	{
		tree[i] = new NODE();
		tree[i]->iData = data[i];
		for (int j = 0; j < 5; j++)
		{
			tree[i]->pChild[j] = NULL;
		}
	}

//	1.2至此, 只是产生了10个节点本身，但节点之间的关系还没有建立起来.
//	下面代码就是建立节点间的父子关系.
	for (i = 0; i < dim(data); i++)		//i对应于pid[i]
	{
		if (pid[i] == NULL)	//NULL
		{
			root = tree[i];
			continue;
		}
		for (j = 0; j < dim(data); j++)	//j对应于tree[j]或者data[j]
		{
			if (tree[j]->iData == pid[i])	//A
			{
				for (k = 0; k < 5; k++)	//k对应于每个节点下的5个孩子节点
				{
					if (tree[j]->pChild[k] == NULL)
					{
						tree[j]->pChild[k] = tree[i];
						break;
					}
				}
				break;
			}
		}
	}

	//2. 进行3种遍历访问
	printf("前序遍历结果为:\n");
	PreOrder(root);
	printf("\n\n");

	printf("中序遍历结果为:\n");
	InOrder(root);
	printf("\n\n");

	printf("后序遍历结果为:\n");
	LastOrder(root);
	printf("\n\n");

	//3. 计算树的节点数量
	printf("树的节点数量为: %d", GetNodeNum(root));
	printf("\n\n");

	//4. 计算树的深度
	printf("树的深度为: %d", GetNodeDepth(root));
	printf("\n\n");
}
