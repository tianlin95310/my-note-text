实例详解printf函数用法

0.前言
使用printf打印时发现, 如果数据类型和打印使用的类型不一致, 结果就是混乱的. 
这是因为printf本身并不进行数据的类型转换, 他只是把输入按照给定的数据格式输出, 如果二者不匹配, 
那么由于不同数据类型的二进制存储方式不一样, 读出的数据就是错误的. 
所以, 为求稳妥, 在使用printf, fprintf, scanf, fscanf在类型不一致时还是手动转化吧！
如:
	printf("%f\n",1.3);
	printf("%d %f\n",1.3,1.3);
输出为:
	1.300000
	-858993459 -92559653408872784000000000000000000000000000000000000000000000.000000
前一行正确, 但是后一行1.3与%d不匹配打印错误, 不仅如此还影响到后一个也打印错误. 

对于读入fscanf, 用%f读入float型的值, 用%lf读入double型的值

C语言printf函数中的格式字符串的一般形式为: 
----------------------------------------------------------
	%[标志][输出最小宽度][.精度][长度]类型
----------------------------------------------------------
其中方括号[]中的项为可选项. 

各项的意义介绍如下: 

1.类型:
----------------------------------------------------------
类型	格式字符意义
----------------------------------------------------------
a/A	浮点数、十六进制数字和p-计数法(C99)
c	输出单个字符
d	以十进制形式输出带符号整数(正数不输出符号)
e/E	以指数形式输出单、双精度实数
f	以小数形式输出单、双精度实数
g/G	以%f%e中较短的输出宽度输出单、双精度实数,%e格式
	在指数小于-4或者大于等于精度时使用
i	有符号十进制整数(与%d相同)
o	以八进制形式输出无符号整数(不输出前缀O)
p	指针
s	输出字符串
x/X	以十六进制形式输出无符号整数(不输出前缀OX)
u	以十进制形式输出无符号整数
----------------------------------------------------------
//示例:
#include <stdio.h>
#include <stdlib.h>
void main()
{
	system("cls");
	printf("This program test print style!\n");
	
	/*以十进制形式输出带符号整数(正数不输出符号)*/
	printf("%d\n", 223);
	printf("%d\n", -232);
	printf("\n");

	/*以八进制形式输出无符号整数(不输出前缀O)*/
	printf("%o\n", 223);
	printf("%o\n", -232);
	printf("\n");

	/*以十六进制形式输出无符号整数(不输出前缀OX)*/
	printf("%x\n", 223);
	printf("%x\n", -232);
	printf("\n");

	/*以十进制形式输出无符号整数*/
	printf("%u\n", 223);
	printf("%u\n", -232);
	printf("\n");

	/*以小数形式输出单、双精度实数*/
	printf("%f\n", 223.11);
	printf("%f\n", 232.11111111);
	printf("%f\n", -223.11);
	printf("%f\n", -232.11111111);
	printf("\n");

	/*以指数形式输出单、双精度实数*/
	printf("%e\n", 223.11);
	printf("%e\n", 232.11111111);
	printf("%e\n", -223.11);
	printf("%e\n", -232.11111111);
	printf("\n");

	/*以%f%e中较短的输出宽度输出单、双精度实数*/
	printf("%g\n", 223.11);
	printf("%g\n", 232.111111111111);
	printf("%g\n", -223.11);
	printf("%g\n", -232.111111111111);
	printf("\n");

	/*输出单个字符*/
	printf("%c\n", 'a');
	printf("%c\n", 97);
	printf("\n");

	/*输出字符串*/
	printf("%s\n", "this is a test!");
	printf("%s\n", "2342o34uo23u");
	printf("\n");

	system("pause");
}

----------------------------------------------------------
	%[标志][输出最小宽度][.精度][长度]类型
----------------------------------------------------------
2.标志
----------------------------------------------------------
标志	意义
----------------------------------------------------------
-	结果左对齐, 右边填空格
+	输出符号(正号或负号)
空格	输出值为正时冠以空格, 为负时冠以负号
#	对c, s, d, u类无影响; 对o类, 在输出时加前缀0;
	对x类在输出时加前缀0x或者0X; 对g, G类防止尾随0被
	删除; 对于所有的浮点形式, #保证了即使不跟任何数字,
	也打印一个小数点字符
0	对于所有的数字格式, 用前导0填充字段宽度, 若出现-标
	志或者指定了精度(对于整数),忽略
----------------------------------------------------------
示例见3.

----------------------------------------------------------
	%[标志][输出最小宽度][.精度][长度]类型
----------------------------------------------------------
3.输出最小宽度
用十进制整数来表示输出的最少位数. 若实际位数多于定义的宽度, 
则按实际位数输出, 若实际位数少于定义的宽度则补以空格或0

//测试标志字符-、+、#、空格, 和 输出最小宽度
#include <stdio.h>
#include <stdlib.h>
void main()
{
	system("cls");
	/*以十进制形式输出带符号整数(正数不输出符号)*/
	printf("*%-10d*\n", 223);
	printf("*%+10d*\n", -232);
	printf("*%2d*\n", 223);
	printf("*%#d*\n", -232);
	printf("\n");

	/*以八进制形式输出无符号整数(不输出前缀O)*/
	printf("*%-10o*\n", 223);
	printf("*%+10o*\n", -232);
	printf("*%o*\n", 223);
	printf("*%#o*\n", -232);
	printf("\n");

	/*以十六进制形式输出无符号整数(不输出前缀OX)*/
	printf("$%-10x$\n", 223);
	printf("$%010x$\n", -232);
	printf("$% x$\n", 223);
	printf("$%#x$\n", -232);
	printf("\n");

	/*以十进制形式输出无符号整数*/
	printf("%-10u\n", 223);
	printf("%+10u\n", -232);
	printf("% u\n", 223);
	printf("%#u\n", -232);
	printf("\n");

	/*以小数形式输出单、双精度实数*/
	printf("%-10f\n", 223.11);
	printf("%+10f\n", 232.11111111);
	printf("% f\n", -223.11);
	printf("%#f\n", -232.11111111);
	printf("\n");

	/*以指数形式输出单、双精度实数*/
	printf("%-10e\n", 223.11);
	printf("%+10e\n", 232.11111111);
	printf("% e\n", -223.11);
	printf("%#e\n", -232.11111111);
	printf("\n");

	/*以%f%e中较短的输出宽度输出单、双精度实数*/
	printf("%-10g\n", 223.11);
	printf("%+10g\n", 232.111111111111);
	printf("% g\n", -223.11);
	printf("%#g\n", -232.111111111111);
	printf("\n");

	/*输出单个字符*/
	printf("%-10c\n", 'a');
	printf("%+10c\n", 97);
	printf("% c\n", 'a');
	printf("%#c\n", 97);
	printf("\n");

	/*输出字符串*/
	printf("%-20s\n", "this is a test!");
	printf("%+20s\n", "2342o34uo23u");
	printf("% 20s\n", "this is a test!");/* 不足补空格 */
	printf("%#s\n", "2342o34uo23u");
	printf("\n");
	system("pause");
}

----------------------------------------------------------
	%[标志][输出最小宽度][.精度][长度]类型
----------------------------------------------------------
4.精度
精度格式符以"."开头, 后跟十进制整数. 本项的意义是: 如果输出数字, 
则表示小数的位数; 如果输出的是字符, 则表示输出字符的个数; 若实际位
数大于所定义的精度数, 则截去超过的部分. 

//测试精度
#include <stdio.h>
#include <stdlib.h>
void main()
{
	printf("%.4d-%.2d-%.2d\n", 1999, 2, 14);
	printf("%04d-%2d-%2d\n", 1999, 2, 14);
	printf("%04d-%02d-%02d\n", 1999, 2, 14);

	printf("%.3d\n", 5555);
	printf("%.3f\n", 0.88888);
	printf("%.3f\n", 0.9999);

	printf("%.6s\n", "this is a test!");

	system("pause");
}

----------------------------------------------------------
	%[标志][输出最小宽度][.精度][长度]类型
----------------------------------------------------------
5.长度
格式符为h,l两种, h表示按短整型量输出, l表示按长整型量输出. 
--------------------------------------------------------------------------------------------------------------------
格式符	示例			说明
--------------------------------------------------------------------------------------------------------------------
h	%hu, %hx, %6.4hd	和整数转换说明符一起使用, 表示一个short int 或者unsigned short int类型的数值
hh	%hhu, %hhx, %6.4hhd	和整数转换说明符一起使用, 表示一个short int 或者unsigned short类型的数值
j	%jd,%8jx		和整数转换说明符一起使用, 表示一个int max_t或者uint max_t类型的数值
l	%ld,%8lu		和整数转换说明符一起使用, 表示一个long int 或者unsigned long int类型的数值
ll	%lld,%8llu		和整数转换说明符一起使用, 表示一个long int 或者unsigned long int类型的数值(C99)
L	%Lf, %10.4Le		和浮点转换说明符一起使用, 表示一个long double的值
t	%td,%12ti		和整数转换说明符一起使用, 表示一个ptrdiff_t值(两个指针之间的差相对应的类型)(C99)
z	%zd,%12zx		和整数转换说明符一起使用, 表示一个size_t值(sizeof返回的类型)(C99)
--------------------------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
void main()
{
	int a = 15;
	float b = 138.3576278f;
	double c = 35648256.3645687;
	char d = 'p';
	printf("a = %d, %5d, %o, %x\n", a, a, a, a);
	printf("b = %f, %lf, %5.4lf, %e\n", b, b, b, b);
	printf("c = %lf, %f, %8.4lf\n", c, c, c);
	printf("d = %c, %8c\n", d, d);

	system("pause");
}
//输出: 
//a = 15,    15, 17, f
//b = 138.357620, 138.357620, 138.3576, 1.383576e+002
//c = 35648256.364569, 35648256.364569, 35648256.3646
//d = p,        p
//请按任意键继续. . .

#include <stdio.h>
#include <stdlib.h>
void main()
{
	int a = 29;
	float b = 1243.2341f;
	double c = 24212345.24232;
	char d = 'h';
	printf("a = %d, %5d, %o, %x\n", a, a, a, a);

	//下面的 %f 和 %lf 格式的输出相同, 说明 l 对 f 类型无影响
	//%5.4lf 指定输出宽度为5, 精度为4
	printf("b = %f, %lf, %5.4lf,%e\n", b, b, b, b);

	//输出双精度实数, %8.4lf 由于指定精度为4位故截去了超过4位的部分
	printf("c = %lf, %f, %8.4lf\n", c, c, c);

	//输出字符量d, 其中 %8c 指定输出宽度为8故在输出字符p之前补加7个空格
	printf("d = %c, %8c\n", d, d);

	system("pause");
}
//输出:
//a = 29,    29, 35, 1d
//b = 1243.234131, 1243.234131, 1243.2341,1.243234e+003
//c = 24212345.242320, 24212345.242320, 24212345.2423
//d = h,        h
//请按任意键继续. . .

使用printf函数时还要注意一个问题, 那就是输出表列中的求值顺序. 不同的
编译系统不一定相同, 可以从左到右, 也可从右到左. VC是按从右到左进行的
#include <stdio.h>
#include <stdlib.h>
void main()
{
	int i = 0;
	printf("%d, %d, %d, %d, %d\n", ++i, --i, i--, i++, -i--);
}
//输出:
//-1, -1, 0, -1, 0
//请按任意键继续. . .

----------------------------------------------------------
	%[标志][输出最小宽度][.精度][长度]类型
----------------------------------------------------------
6.特殊用法 %*.*
	printf("%*.*s\n", m, n, "abcdefgh");
前边的*定义的是总的宽度, 后边的定义的是输出的个数. 分别对应外面的参数m和n.
我想这种方法的好处是可以在语句之外对参数m和n赋值, 从而控制输出格式.

#include <stdio.h>
#include <stdlib.h>
void main()
{
	float f = 12.34567f;
	char s[] = "abcdefgh";
	printf("%*.*f\n", 6, 3, f);
	printf("%*.*s\n", 6, 3, s);
}
//输出
//12.346
//   abc
//请按任意键继续. . .
