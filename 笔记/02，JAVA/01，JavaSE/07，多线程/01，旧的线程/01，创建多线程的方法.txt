1，多线程不管怎样都要用到Thread类
2，在主线程里，怎么区分不同的不同的线程，用Thread对象调用start方法，就会产生一个另外一个线程1，线程1会与主线程同时执行
	在主线程，不带有new Thread对象的语句的操作都是针对主线程的，线程1主要载体就是run函数，在线程1里不带有new Thread对象
	的语句，针对的都是线程1的。Thread r = Thread.currentThread();除外，它代表的还是本线程，不是new出来的


1，继承Thread类，
	该类实现了start函数，内部含有有多线程机制，类部的Runnable接口成员为多态的父接口
	start函数会调用run函数，而run函数最终调用的是target成员的run函数，根据多态，其最终调用的
	还是实现类的run函数。

2，实现Runable接口，
因为Runable接口里面只有一个函数run，没有与多线程有关的start函数，所以还需要借助
Thread类的start函数，并且传递一个Runnable参数给Thread类的target成员，
他的本质就是一个实现Runnable接口的类，这就是一种多态，最终调用的还是实现类的run函数。
	
	相当于Runnable target = new Thread1();

	而Thread里的run是调用target.run(),也就是new Thread1().run().


3，接口式的匿名内部类

举例
class Thread1 implements Runnable
{
	public void run()
	{
		System.out.println("Thread1");
	}
}
class Thread2 extends Thread
{
	public void run()
	{
		System.out.println("Thread2");
	}
}
public class Test
{
	public static void main(String[] args)
	{
		for(int i = 1 ; i < 5; i++)
		{
			
			//1，实现Runnable接口，借用Thread类
			new Thread(new Thread1()).start();
			
			//2，继承Thread类
			new Thread2().start();
			
			//3，接口式的匿名内部类
			new Thread(new Runnable()
			{
				public void run()
				{
					System.out.println("Thread3");					
				}
				
			}).start();
			//
			System.out.println(Thread.activeCount());
			System.out.println("hello world");
			
			try
			{
				Thread.sleep(200);
			} catch (InterruptedException e)
			{
				e.printStackTrace();
			}
		}
		System.out.println("Game Over!");
	}
}
