1,是所有的类的父类，包括数组，是最终的根类
  一个类没有继承其他类，则它将直接继承object类。

2，常用方法
  1，toString()		
	1，print函数（会自动调用tostring（）方法），自定义类通常要重写
	2，集合与toString
		ArrayList list = new ArrayList<>();
		list.add("asd");
		list.add(123);
		System.out.println(list);
		// 这里虽然不知道是什么具体类型，为Object类型，但
		// list的toString是调用每个元素自己的toString，添加的是什么对象，调用的就是那个对象的toString


  2，equals（）		判断非空对象是否相等,通常也要重写该方法，String类重写了equals()
			equals相等，但对象不一定相等

  3，getClass();	获取类名,用于反射机制

  4，clone();		得到对象的副本，必须要实现Cloneable接口，该接口没有任何方法。重写Object的clone方法，
			本质上调用的是Object类的clone方法。这样得到的对象与源对象的地址不同,不会调用构造函数

  5，hashCode();*	返回对象的哈希地址，并不是对象引用的直接地址，像String类的equals函数的若返回true，则hashCode的返回值相等,系统认为
			若对象的内容一样，则他们的hashcode应该一样但hashcode一样的两个对象也不一定相等


3，String,系统类的特殊性	
		String str1 = new String("123123");
		String str2 = "123123";
		String str3 = new String("123123");
		
		System.out.println(str1.hashCode());
		System.out.println(str2.hashCode());
		System.out.println(str3.hashCode());	
	// 他们返回的hashCode是一样的，系统认为内容一样，hashcode一样
	// 但实际上他们并不是同一个对象
		
		Long l1 = 100L;
		Long l2 = new Long(100L);
		System.out.println(l1.hashCode());
		System.out.println(l2.hashCode());	
	// 对于像数据类型包装类，hashCode返回类型的实际数值。

4,finalize(),
	当一个对象失去引用时，我们通过调用gc通知垃圾回收器来回收垃圾，
	垃圾回收器会让那个对象自动调用finalize方法，如果我们重写该方法
	并让该对象重新获得引用，那么他就会被救活，但finalize只会执行一次，只有一次机会。
	