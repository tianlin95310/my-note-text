1，内部类可以看做是外部类的一个成员
	他可以被4种修饰符修饰，访问方式与普通成员的访问方式一样。但内部类不会随着成员一样被继承而继承
	内部类可见时可以导包。

2，他能被static修饰，分为静态内部类，非静态内部类。
	
	1，静态内部类的创建不需要用外部类的对象，

	2，非静态的内部类创建对象时需要用外部类的对象，

	3，除了方法内部类以外，所有外部可见的内部类都是可以导入的，可见原则与类成员一样。

	4，虽然普通内部类的实例化需要外部类的对象，但定义引用是不需要的。

********5，个人觉得静态内部类内部类能解决一个源文件只能有一个public类的缺陷，跟子包的情形非常相似

	

3，关于内部类能否被继承

	1，对于普通类，抽象类
********其内部的抽象类，普通类需要加上static才能被继承，也就是静态的内部类，但内部接口能直接实现，这是特殊点
	因为内部接口默认就是static修饰的

	2，对于接口
	其内部的普通类，抽象类以及接口，加不加static都能被继承，它默认就是static


4，普通类里面可以有，以下能导包的前提条件是外部要可见
				
	1，普通内部类		，new内部类，需要外部类的对象
	2，静态内部类		，new内部类，不需要外部类的对象		


5，抽象类里面可以有

	1，静态内部类，		，new内部类，静态内部类不需要外部类的对象。					

	
6，接口里面可以有，他们都是static的，接口内部只有静态类，静态接口

	1，静态内部类，			，new内部类，因为是静态的，不需要对象					
	2，静态接口，			，new内部接口的实现类


导包举例
public interface Interface
{
	public class a
	{
		public void fun1()
		{
			System.out.println("qwe");
		}
		public static void fun2()
		{
			System.out.println("qwe");
		}
	}
	
}
import t.Interface;
import t.Interface.a;

public class Test
{
	public static void main(String[] args)
	{
//		Interface.a p = new Interface.a();
		a p = new a();
		p.fun1();
	}

}
