特征：
1，非静态内部类里不能定义静态的成员

2，可用外部类加上this来区分命名冲突

3，可以导内部类，不用再加外部类.了，但在类外部new对象时还是要用外部类对象

4，特殊点，平时遗漏点
	1，外部类的静态方法不能直接访问非静态的内部类，但可以直接访问静态的内部类。

	2，外部类的非静态的方法可以直接访问非静态的内部类。

  原因如下：还是那个老问题，就是静态的方法加载时，外部内的对象都还没有产生，而非静态的
	内部类对象的产生是需要外部类的对象的，对象还没有，自然就不能产生内部类的对象。

	那普通的方法为什么可以呢，普通的方法又称为对象方法，随着对象的产生而产生，外部类对象
	产生了，自然就可以调用了

1，普通成员内部类
public class C
{
	private int a;
	public int b;
	public c1 getC1()	
	{
		return new c1();
	}
	public void fun()	
						
	{
		getC1().i1 = 10;	// 外部类不能直接访问内部类的成员，需要用内部类的对象，这里有点特殊
					// 通常类外部的对象是不能直接访问private成员的，这里应该是因为同处于
					// 一个类中
	}
	public class c1			
	{
		private int i1;
		public int i2;
		public void fun()
		{
			this.i1 = 1;
			this.i2 = 1;
			
			a = 10;		//内部类可以直接访问外部类的成员
			b = 10;
			C.this.a = 10;	//当有命名冲突时，用类名加this的形式加以区分
			C.this.b = 10;
			
			System.out.println(a+" " +b+" " + i1 + " " + i2);
		}
	}
}

public static void main(String[] args)
	{
		
	C.c1 ip = p.new c1();	//通过外部类对象new一个内部类对象，内部类是可以导包的，可见的情况下
	ip.fun();
		
	}