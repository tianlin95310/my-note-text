//客户端
public class Client
{
	public static void main(String[] args)
	{
		try
		{
			Socket s = new Socket(InetAddress.getByName("127.0.0.1"), 8888);

			if(s != null)
			{
				
				System.out.println(s.getLocalSocketAddress());
				System.out.println(s.getRemoteSocketAddress());
				//为某个客户端套接字指定读写
				InputStream is = s.getInputStream();
				OutputStream out = s.getOutputStream();
				
				new Thread(new Reader(is)).start();
				new Thread(new Writer(out)).start();

			}

		} catch (IOException e)
		{
			e.printStackTrace();

		}
	}
}

class Reader implements Runnable
{
	private InputStream is = null;

	public Reader(InputStream is)
	{
		this.is = is;
	}

	public void run()
	{
		try
		{
			byte bytes[] = new byte[50];
			int len = -1;
			while ((len = is.read(bytes)) != -1)
			{
				System.out.println(new String(bytes, 0, len));
			}

		} catch (IOException e)
		{
			e.printStackTrace();
		}

	}
}

class Writer implements Runnable
{
	private OutputStream os = null;
	public Writer(OutputStream os)
	{
		this.os = os;
	}

	public void run()
	{
		BufferedInputStream bis = new BufferedInputStream(System.in);
		try
		{
			byte bytes[] = new byte[50];
			int len = -1;
			while ((len = bis.read(bytes)) != -1)
			{
				os.write(bytes, 0, len);
				os.flush();
			}
		} catch (IOException e)
		{
			e.printStackTrace();
		}

	}

}

服务器端：
public class Server implements Runnable
{
	private Socket s = null;

	public Server(Socket s)
	{
		this.s = s;
	}

	public static void main(String[] args)
	{
		try
		{
			// 1.创建服务器
			ServerSocket ss = new ServerSocket(8888);

			while (true)
			{
				// 2，用多线程来同事处理多个用户
				Socket s = ss.accept();

				if (s != null)
				{
					System.out.println(s.getLocalSocketAddress());
					System.out.println(s.getRemoteSocketAddress());
						// 3，启动某个套接字线程
					new Thread(new Server(s)).start();
				}
			}
		} catch (IOException e)
		{
			e.printStackTrace();
		}
	}
	public void run()
	{
		try
		{
			InputStream is = s.getInputStream();
			OutputStream os = s.getOutputStream();

			// 4，分别为套接字的读写，创建新的线程
			new Thread(new Reader(is)).start();
			new Thread(new Writer(os)).start();

		} catch (IOException e)
		{
			e.printStackTrace();
		}
	}
}

class Reader implements Runnable
{
	private InputStream is = null;

	public Reader(InputStream is)
	{
		this.is = is;
	}

	public void run()
	{
		try
		{
			byte bytes[] = new byte[50];
			int len = -1;
			//对于流类的标准写法
			while ((len = is.read(bytes)) != -1)
			{
				System.out.println(new String(bytes, 0, len));
			}

		} catch (IOException e)
		{
			e.printStackTrace();
		}

	}

}

class Writer implements Runnable
{
	private OutputStream os = null;

	public Writer(OutputStream os)
	{
		this.os = os;
	}

	public void run()
	{
		try
		{
			// 从标准输入接收
			BufferedInputStream bis = new BufferedInputStream(System.in);
			byte bytes[] = new byte[50];
			int len = -1;
			while ((len = bis.read(bytes)) != -1)
			{
				//送到网络传输
				os.write(bytes, 0, len);
				os.flush();
			}
		} catch (IOException e)
		{
			e.printStackTrace();
		}

	}

}

