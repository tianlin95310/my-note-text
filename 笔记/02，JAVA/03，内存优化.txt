拒绝在 Bitmap 上浪费你的内存


使用优化后的数据容器

请使用 Andorid 框架中优化过的数据容器，例如 SparseArray,SparseBooleanArray 和 LongSparseArray。类似于 HashMap 这一类的容器的效率不是很高，因为在每个 Map 中对于每一次的存放数据，他都需要独立一个单独的 Entry 对象进行传芳。而 SparseArray 由于禁止系统自动封装键值对，因此他更加有效率。并且你不需要担心丢失掉原有信息


小心内存花销

请对你正在使用的语言和依赖包拥有一定的了解，并且在你设计应用的整个阶段，都不要忽视它。通常大多数看起来无害的东西都可能让你花费大量的内存，比如说一下的几个：

1.枚举与静态常量相比，通常会消耗两倍的内存资源，因此你应该尽量避免在 Android 中使用枚举类型

2.Java 中的每一个类（包括匿名内部类），都会消耗大约500比特内存

3.每一个类对象都会消耗12-16比特内存

4.把单个 Entry 放入 HashMap 需要多消耗32比特的内存（原因请参看上一小节，使用优化后的数据容器）

虽然这里的消耗看起来比较少，但是他们累计起来就很大了，应用中设计那些重量级的类就很可能承受这些内存花销。这会使你的堆分析变得困难起来，你很难发现你的问题其实是因为很多小的对象正在占用你的内存。


小心抽象代码
通常，开发者都会将抽象作为一种好的编程习惯，因为抽象可以提升代码的灵活性和可维护性。但是，抽象方法可能带来很多的额外花费，例如当他们执行的时候，他们拥有大量的代码，并且他们会被多次映射到内存中占用更多的内存，因此如果抽象的效果不是很好，那么最好放弃他


对于序列化数据使用 Protobufs
Protocol buffers 是谷歌一种跨语言，跨平台的结构化序列数据，相比于 XML，他更小，更快，更简单。如果你决定让你的数据使用 Protobufs，你应用总是在你的客户端使用纳米级的Protobufs。规则的Protobufs会产生极其冗余的代码，这可能会导致应用产生各种问题：增加内存使用，APK包体增加，执行效率变慢，打破Dex的符号限制。


避免依赖注入框架

使用类似于 Guice 和 RoboGuice 的依赖注射框架，或许会使你的代码变得更加漂亮，因为他们能够减少你需要写的代码，并且为测试或者在其他条件改变的情况下，提供一种自适应的环境。但是，这些框架在初始化的时候会因为注释而消耗大量的工作在扫描你的代码上，这会让你的代码在进行内存映射的时候花费更多的资源。虽然这些内存能够被 Android 进行回收，但是等待整个分页被释放需要很长一段时间。


小心使用外部依赖包

很多依赖包都不是专门为了移动环境或者移动客户端写的。如果你决定使用一个外部依赖包，你应该提前明白你需要为了将它移植到移动端而消耗花费大量的时间和工作量。请在使用外部依赖包得时候提前分析他的代码和内存占用

即使依赖包是为了 Android 而设计的，但是这也有潜伏的危险，因为每一个包都做着不同的工作。例如，有一个依赖包使用纳米级的 protobufs 但是别的包使用微米级的 protobufs.那么现在在你的应用中就有两套 protobuf 的标准了。这会在你记录数据，分析数据，加载图像，缓存，或者其他任何可能的情况下发生你不希望发生的事情。ProGuard 无法在这里帮助你，因为他们都是你所依赖包的底层实现，。当你使用从别的依赖包（他可能继承了很多的依赖包）里继承的 Activity 时，这个问题变得尤其严重，当你使用反射以及干别的事情的时候

请注意不要落入一个依赖包的陷阱，你不希望引入一大片你根本不会使用到的代码。如果你无法找到一种已经实现的逻辑来完全满足你的需求，那么你尽量创建一个自己的实现方式。


优化整体性能

很多关于优化应用的整体性能的信息被放到了 Best Practices for Performance，这里的很多文章介绍了如何优化 CPU 性能，但是很多小提示能够帮助你优化你的应用的内存使用，比如说通过减少你ui 的布局元素。

你应该读一下优化你的 ui，并使用布局调试工具来进行优化，另外可以通过 lint 工具来进行优化


使用 ProGuard 来剔除你不用的代码

ProGuard 工具能够通过移除不用的代码以及对类，方法和标量进行无意义的重命名来起到回收，优化和混淆代码的作用，使用 ProGuard 能够使你的代码变得更紧凑，而且减低内存消耗


使用 Zipalign 来优化你的 Apk

如果你对你生成的 APK 文件做了后期优化，那么你必须要使用 Zipalign 来让他对齐字节。不这样做可能会导致你的应用因为从 APK 里的资源不能被很好的映射到内存里而消耗更多的内存。

注意：现在 Google 市场不接受没有通过 Zipalign 处理过的 APK 文件


分析你的内存使用

一旦你已经拥有一个稳定版本的应用，那么就从他的整个生命周期开始分析你应用的使用内存。更多关于你应用的内存分析，请查看Investigating Your RAM Usage.