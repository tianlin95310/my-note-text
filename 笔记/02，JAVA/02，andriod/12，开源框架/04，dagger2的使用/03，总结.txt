基本注解
@Inject：此注解用于告诉Dagger2，我们需要这个类的实例对象。主要用于标记哪个类是需要注入的。
@Module：此注解里面全是方法，用于对外提供对象，自己定义方法，方法上使用@Provides。自定义一个类，以Module结尾，用@Module注解。
@Provides：此注解用于标记方法，表示可以通过这个方法获取一个对象，一般用于自定义类中。
@Component：此注解主要用于关联自定义module类和MainActivity；关联module使用：@Component(modules={UserModule.class})；关联Activity，以方法参数		的形式传入MainActivity到连接器中
@Named与@Qualifier：用于区别不同对象的实例。必须要成对出现，否则会报错。
@PerActivity：限定对象的生命周期和Activity一样。一般应用于自定义的Component上。
@Singleton：标记为单例模式，如果在自定义Module中使用了此注解，在自定义的Component上也要使用该注解。


1，如果某个对象拥有被 @Inject 注解过的构造方法，另一方面在 Module 中它又通过 @Provides 提供了依赖。那么，最终，Dagger2 采取了哪一种呢？
Dagger2 依赖查找的顺序是先查找 Module 内所有的 @Provides 提供的依赖，如果查找不到再去查找 @Inject 提供的依赖。

2，Dagger2 提供了延迟加载能力。只需要通过 Lazy 就好了，Lazy 是泛型类，接受任何类型的参数。只有调用 TestLazy 实例的 getName() 方法时，name 才会	被初始化。

3，Provider 强制重新加载，与单例刚好相反