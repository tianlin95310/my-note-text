package com.example.listview;

import java.util.ArrayList;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ListView;
import android.widget.TextView;

import com.example.listview.MainActivity.MyAdapter.Holder;

public class MainActivity extends Activity
{
	ListView lv;

	ArrayList<String> list = new ArrayList<String>();

	Holder holder;

	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		lv = (ListView) findViewById(R.id.lv);

		for (int i = 0; i <= 50; i++)
		{
			list.add(String.format("%02d", i));
		}

		lv.setAdapter(new MyAdapter());

	}

	class MyAdapter extends BaseAdapter
	{

		@Override
		public int getCount()
		{
			return list.size();
		}

		@Override
		public Object getItem(int position)
		{
			return list.get(position);
		}

		@Override
		public long getItemId(int position)
		{
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent)
		{
			// 第一次加载时，所有的传convertView都为null，convertView就是每一行的View，当向下滑动一个出来时，第一个的
			// convertView对象会传给新滑动出来的item，要做的只是将上面的内容修改
			
			// 当有一行开始显示时getView函数就会调用一次，position是当前准备显示的行的下标
			// 所以他要么比getFirstVisiblePosition小1，要么比getLastVisiblePosition大1
			if (convertView == null)
			{
				holder = new Holder();
				convertView = getLayoutInflater().inflate(android.R.layout.simple_list_item_1, null);
				holder.tv = (TextView) convertView.findViewById(android.R.id.text1);
				convertView.setTag(holder);

				Log.d("my",
						"null" + "(" + position + ")" + "，当前第一行" + lv.getFirstVisiblePosition() + "当前最后一行，"
								+ lv.getLastVisiblePosition());
			} else
			{
				holder = (Holder) convertView.getTag();
				
				Log.d("my", "" + holder.toString().substring((holder.toString()).lastIndexOf("@")) + "(" + position + ")" + "当前第一行" + lv.getFirstVisiblePosition()
						+ "当前最后一行" + lv.getLastVisiblePosition());
			}

			holder.tv.setText(list.get(position));
			return convertView;
		}

		class Holder
		{
			TextView tv;
		}

	}

}
