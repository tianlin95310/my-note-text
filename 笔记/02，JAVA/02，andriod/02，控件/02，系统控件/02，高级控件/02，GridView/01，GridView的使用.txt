概念：GridView与ListView的类似，Adapter与ListView也一样

差别是ListView一行只能有一个item
GridView行可以有多个item

public class MainActivity extends ActionBarActivity
{

	List<Map<String,Object>> data;
	private GridView gv;
	
	private int i = 1;
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		gv = (GridView) findViewById(R.id.gv);
		
		data = new ArrayList<Map<String,Object>>();
		// 方式1得到data
//		read(new File("/storage"));
		
		// 方式2得到data
		for(int i = 1; i <= 50 ; i++)
		{
			Map<String,Object> map = new HashMap<String,Object>();
			// 用Adapter关联时，用bmp是不能显示的，只能是图片对应的id才能显示出图片
			Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher);
			// 使用Uri是可以显示的
//			Uri uri = Uri.fromFile(new File("ic_launcher.png"));
			
			map.put("path", bmp);
			map.put("text", "img" + (i));
			data.add(map);
		}
		SimpleAdapter ddapter = new SimpleAdapter(this, data, R.layout.grid_view, new String[]{"path","text"}, new int[]{R.id.grid_iv,R.id.grid_tv});
		gv.setAdapter(ddapter);
		
		
		// 方式3
//		gv.setAdapter(new BaseAdapter()
//		{
//			public View getView(int position, View convertView, ViewGroup parent)
//			{
//				View view = View.inflate(MainActivity.this, R.layout.grid_view, null);
//				ImageView iv = (ImageView) view.findViewById(R.id.grid_iv);
//				TextView tv = (TextView) view.findViewById(R.id.grid_tv);
//				
//				// 1，系统图片过大，会抛出异常
////				Map<String,Object> map = data.get(position);
////				String path = (String) map.get("path");
////				String name = (String) map.get("text");
//				
//				// 2，图片太大会抛异常
////				Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.drawable.ppp);
		
//				// 3，所以要进行放缩，系统也是获得了图片的略缩图，自己写的缩小函数不够好，滑动时很卡，系统的略缩图就很流畅
//				Bitmap bmp = scale(null,R.drawable.ppp);
//				iv.setImageBitmap(bmp);
//				tv.setText("wwww");
//				return view;
//			}
//			public long getItemId(int position)
//			{
//				// TODO Auto-generated method stub
//				return 0;
//			}
//			public Object getItem(int position)
//			{
//				return null;
//			}
//			public int getCount()
//			{
//				return 100;
//			}
//		});
	}
	// 读取文件
	public void read(File file)
	{
		if(file == null)
			return;
		
		if(!file.exists())
			return;
		
		if(file.isDirectory())
		{
			File files[] = file.listFiles();
			
			if(files == null)
				return;
			if(files.length == 0)
				return;
			
			for(File f : files)
			{
				read(f);
			}
		}
		if(file.getPath().endsWith(".jpg"))
		{
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("path", file.getPath());
			map.put("text", file.getName());
			data.add(map);
		}
	}

	// 图片放缩
	public Bitmap scale(String path,int id)
	{
		BitmapFactory.Options ops = new BitmapFactory.Options();
		ops.inJustDecodeBounds = true;
		if(path == null)
			BitmapFactory.decodeResource(getResources(), id, ops);
		else
			BitmapFactory.decodeFile(path, ops);
		
		int picH = ops.outHeight;
		int picW = ops.outWidth;
		
		WindowManager window = this.getWindowManager();
		Point point = new Point();
		window.getDefaultDisplay().getSize(point);
		int windowH = point.y;
		int windowW = point.x;
		
		// 得到比率
		int rateH = picH / windowH;
		int rateW = picW / windowW;
		int rate = 0;
		if(rateH > 1 && rateH > rateW)
			rate = rateH;
		if(rateW > 1 && rateW > rateH)
			rate = rateW;
		
		// 图片太大的话可以进行更大比率的缩小
		ops.inSampleSize = rate * 16;
		ops.inJustDecodeBounds = false;
		Bitmap bmp;
		if(path == null)
			bmp = BitmapFactory.decodeResource(getResources(), id, ops);
		else
			bmp = BitmapFactory.decodeFile(path, ops);
		return bmp;
	}

}

// 布局文件
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="com.examplegridview.MainActivity" >

    <GridView
        android:id="@+id/gv"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:horizontalSpacing="10dp"
        android:verticalSpacing="10dp"
        android:stretchMode="columnWidth"
        android:gravity="center"
        android:columnWidth="80dp"
        android:numColumns="auto_fit"
         />

</RelativeLayout>
