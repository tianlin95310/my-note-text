package com.example.filedownload;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;

import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.ActionBarActivity;
import android.view.View;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;

public class MainActivity extends ActionBarActivity
{
	// 资源网址
	private EditText et;

	// 进度条特殊控件，子线程可以设置
	private ProgressBar pb;
	// 百分比进度
	private TextView tv;
	// 已下载实时数据
	private int SUM = 0;
	// 临时文件已下载数据
	private int read1 = 0;
	private int read2 = 0;
	private int read3 = 0;
	private int read4 = 0;
	// 文件的总长度
	private int length = 0;

	Handler handler = new Handler()
	{
		public void handleMessage(android.os.Message msg)
		{
			if (msg.what == 1)
			{
				// 用于设置百分比进度
				int rate = (Integer) msg.obj;
				tv.setText("" + rate + "%");
			}
		};
	};

	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		et = (EditText) findViewById(R.id.et);
		pb = (ProgressBar) findViewById(R.id.pb);
		tv = (TextView) findViewById(R.id.tv);
	}

	class MyThread extends Thread
	{
		// 临时记录文件标志
		private int flag;
		// 开始位置
		private int start;
		// 结束位置
		private int end;
		// 资源路径
		private String path;

		public MyThread(int flag, int start, int end, String path)
		{
			super();
			this.flag = flag;
			this.start = start;
			this.end = end;
			this.path = path;
		}

		public void run()
		{
			try
			{
				System.out.println("thread " + flag + " begin");
				// 获取贮存卡目录
				File dir = Environment.getExternalStorageDirectory();
				// 获取文件对象
				File file = new File(dir, "temp" + flag + ".txt");
				// 如果文件存在，则将已经读取的文件放到新的开始出
				if (file.exists())
				{
					if (flag == 1)
						start = start + read1;
					else if (flag == 2)
						start = start + read2;
					else if (flag == 3)
						start = start + read3;
					else if (flag == 4)
						start = start + read4;
				} else
				{
					// 如果文件不存在说明是第一次下载。
					SUM = 0;
					start = start + 0;
				}

				// 连接资源
				URL url = new URL(path);
				HttpURLConnection con = (HttpURLConnection) url
						.openConnection();
				con.setConnectTimeout(5000);
				con.setRequestMethod("GET");
				// 获取局部资源，返回码为206
				con.setRequestProperty("Range", "bytes=" + start + "-" + end);
				InputStream is = con.getInputStream();

				// 打开文件，将文件指针移到本次开始处
				RandomAccessFile obfile = new RandomAccessFile(new File(dir,
						"qq.zip"), "rw");
				obfile.seek(start);
				// 本次下载的字节数
				int thislength = 0;

				byte bytes[] = new byte[1024 * 1024];
				int len = -1;
				while ((len = is.read(bytes)) != -1)
				{
					
					obfile.write(bytes, 0, len);
					thislength = thislength + len;
					// 打开下载数量存贮文件
					RandomAccessFile writefile = new RandomAccessFile(new File(
							dir, "temp" + flag + ".txt"), "rw");
					int sum = 0;
					// 各线程需要加上上一次的读取数量
					if (flag == 1)
						sum = thislength + read1;
					if (flag == 2)
						sum = thislength + read2;
					if (flag == 3)
						sum = thislength + read3;
					if (flag == 4)
						sum = thislength + read4;
					// 写进文件中
					writefile.write(("" + sum).getBytes());
					writefile.close();
					// 实时下载量增加
					SUM = SUM + len;
					// 通过进度条响应
					pb.setProgress(SUM);
					// 得到比率
					int rate = SUM * 100 / length;
					// 发送消息
					Message msg = handler.obtainMessage();
					msg.obj = rate;
					msg.what = 1;
					handler.sendMessage(msg);
				}

				obfile.close();
				System.out
						.println("thread "
								+ flag
								+ " download over**************************************");
			} catch (Exception e)
			{
				e.printStackTrace();
			}
			super.run();
		}

	}

	public void download(View v)
	{
		new Thread()
		{
			public void run()
			{
				try
				{
					String path = et.getText().toString().trim();
					URL url = new URL(path);
					HttpURLConnection con = (HttpURLConnection) url
							.openConnection();
					con.setConnectTimeout(5000);
					con.setRequestMethod("GET");
					// 获取文件大小
					length = con.getContentLength();
					// 新建文件
					File dir = Environment.getExternalStorageDirectory();
					RandomAccessFile obfile = new RandomAccessFile(new File(dir, "qq.zip"), "rw");
					// 设置文件大小，这是RandomAccessFile的特有函数，流类文件没有
					obfile.setLength(length);
					// 进度条设置最大值
					pb.setMax(length);
					obfile.close();
					
					for (int i = 1; i <= 4; i++)
					{
						// 获取临时文件对象
						File flagfile = new File(dir, "temp" + i + ".txt");
						// 文件存在就立即读取
						if (flagfile.exists())
						{
							FileInputStream fis = new FileInputStream(flagfile);
							byte bytes[] = new byte[32];
							int len = fis.read(bytes);
							fis.close();
							int read = Integer.parseInt(new String(bytes, 0,
									len));
							System.out.println(read);
							// 数据记录在响应的线程里
							if (i == 1)
								read1 = read;
							else if (i == 2)
								read2 = read;
							else if (i == 3)
								read3 = read;
							else if (i == 4)
								read4 = read;
						}
						else
							SUM = 0;
					}
					
					SUM = SUM + read1 + read2 + read3 + read4;
					// 得到每个线程的下载量
					int bloackSize = length / 4;
					for (int i = 1; i <= 4; i++)
					{
						// 得到每个线程的理论开始值
						int start = (i - 1) * bloackSize;
						// 得到每个线程的下载终点值
						int end = (i == 4 ? length - 1 : i * bloackSize - 1);
						// 开启子线程
						new MyThread(i, start, end, path).start();
					}
				} catch (Exception e)
				{
					e.printStackTrace();
				}
			};
		}.start();

	}

}