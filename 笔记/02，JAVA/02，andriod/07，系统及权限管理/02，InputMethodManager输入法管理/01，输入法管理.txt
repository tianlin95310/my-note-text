et1.setOnFocusChangeListener(new OnFocusChangeListener()
		{
			public void onFocusChange(View v, boolean hasFocus)
			{
				// 获取焦点时
				if(hasFocus == true)
				{
					linear1.setVisibility(View.GONE);
					linear2.setVisibility(View.VISIBLE);
					// et2请求焦点
					et2.requestFocus();
					// 得到系统的输入法服务
					InputMethodManager input = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
					// 第一个参数为请求获取输入法的view，后面的打开输入法的方式
					input.toggleSoftInputFromWindow(v.getWindowToken(), InputMethodManager.SHOW_FORCED, 0);
				}
			}
		});
		
		et2.setOnFocusChangeListener(new OnFocusChangeListener()
		{
			
			@Override
			public void onFocusChange(View v, boolean hasFocus)
			{
				if(hasFocus == false)
				{
					linear1.setVisibility(View.VISIBLE);
					// gone这种方式是真的消失了，不会占用空间
					linear2.setVisibility(View.GONE);
				}
				InputMethodManager input = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
				// 第一个参数还是需要关闭输入法的view
				input.hideSoftInputFromWindow(v.getWindowToken(), 0);
			}
		});
		