<%@ page language="java" contentType="text/html; charset=utf-8"
	pageEncoding="utf-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Insert title here</title>

<script type="text/javascript">
	// 这种赋值方式是函数的匿名实现，onload函数是由一个匿名的函数来赋值的
	// 这里类似于java里面的匿名内部类，直接实现接口里的抽象函数
	// 而在这里是直接给出函数的实现，真正赋值给onload的其实是函数的地址，即这个匿名函数的地址
	window.onload = function() {

		var lis = document.getElementsByTagName("li");

		alert(lis.length);

		for (var i = 0; i < lis.length; i++) {
			lis[i].onclick = function() {

				// this表示当前的lis[i]对象，因为
				// onclick是lis[i]对象的方法，属于对象方法
				// 会发现i始终等于4，因为在为lis的每个孩子构建onclick函数时
				// 孩子肯定是没有被点击的，当孩子被点击时，此时for循环也已经走完了，所以i的值是4
				alert("this = " + this + "i = " + i);
				alert(this.firstChild.nodeValue);
			}
		}

		/**
		// 方式1，与上面一样
		lis[0].onclick = function()
		{
			alert("匿名函数的形式将函数地址赋值给ocnclick函数");
		}
		
		// 方式2，将函数名赋值给onclick，函数名其实就是函数的入口地址
		lis[1].onclick = test2;
		
		// 错误写法，直接将函数体赋值给onclick
		// 在JS脚本里这样写的话是将函数的调用结果返回给onclick，而不是将函数的地址返回给onclick，但是在HTML内部是可以这样写的
		lis[2].onclick = alert("调用函数");
		lis[3].onclick = test3();
		 */
	}

	function test2() {
		alert("通过函数名将函数地址赋值给onclick");
	}

	function test3() {
		alert("调用函数");
	}
</script>
</head>
<body>

	<p>你喜欢哪个城市?</p>
	<ul id="city">
		<li id="bj" name="BeiJing">北京</li>
		<li>上海</li>
		<li>东京</li>
		<li>首尔</li>
	</ul>

	<br>

</body>
</html>