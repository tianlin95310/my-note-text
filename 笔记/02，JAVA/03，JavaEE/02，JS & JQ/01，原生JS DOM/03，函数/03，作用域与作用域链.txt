1，函数的局部环境可以访问函数作用域中的变量和函数，也可以访问其父环境，乃至全局环境中的变量和环境。

2，每次进入一个新的执行环境，都会创建一个用于搜索变量和函数的作用域链。

3，全局环境只能访问全局环境中定义的变量和函数，不能直接访问局部环境中的任何数据。

4，子环境中的变量会覆盖父环境的，不管变量定义在函数的那个部分，哪怕是函数的最后。

// 作用域提升
  var name = "haha";
  var changeName1 = function () {
    // 作用域提升，name是当前的环境的，不会报错
    console.log(name)
    // 当期的this是全局的window对象
    console.log(this.name)
    // 当前环境的定义的变量，因为覆盖了父环境的变量
    let name = "xixi"
  }
  changeName1()

  var changeName2 = function () {
    // 作用域提升，name2不会报错，因为当前环境定义过name2
    console.log(name2)
    console.log(name)
    let name2 = "xixi"
  }
  changeName2()
  console.log(name)



